from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from keyboards.inline import *
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
# from config import config
import database.db as db
from aiogram.filters.callback_data import CallbackData
from aiogram.filters.state import StateFilter





router_admin = Router()

class PromotionStates(StatesGroup):
    adding_promotion_title = State()
    adding_promotion_description = State()


@router_admin.callback_query(F.data.startswith("ver"))
async def verification_user(callback: CallbackQuery, state: FSMContext, bot: Bot):
    action = callback.data.split()[1]
    user_id = int(callback.data.split()[2])
    if action == "yes":
        await db.verification_host(user_id)
        await bot.send_message(
            text="–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∏",
            chat_id=user_id
        )

    else:
        await bot.send_message(
            text="–í–∞–º –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            chat_id=user_id
        )
    await callback.message.edit_reply_markup(
        reply_markup=edit_chat_ver(action)
    )
        

@router_admin.callback_query(F.data.startswith('admin'))
async def admin(callback: CallbackQuery):
    action = callback.data.split()[1]
    if action == "start":
        await callback.message.edit_reply_markup(
            reply_markup=admin_inline()
        )

class AddServiceState(StatesGroup):
    city = State()         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞
    description = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏

# –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
@router_admin.callback_query(F.data == "service_add")
async def start_service_addition(callback: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if callback.message:
        await callback.message.delete()
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(AddServiceState.city)
    message = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —É—Å–ª—É–≥–∏:")
    await state.update_data(last_bot_message=message.message_id)

@router_admin.message(AddServiceState.city)
async def set_service_city(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    data = await state.get_data()
    last_bot_message_id = data.get("last_bot_message")
    if last_bot_message_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_message_id)
        except:
            pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(city=message.text)
    response = await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
    await state.set_state(AddServiceState.description)
    await state.update_data(last_bot_message=response.message_id)

@router_admin.message(AddServiceState.description)
async def set_service_description(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    last_bot_message_id = data.get("last_bot_message")
    if last_bot_message_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_message_id)
        except:
            pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
    service_data = await state.get_data()
    city = service_data.get("city")
    description = message.text
    # await db.create_services_table()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥—É –≤ –ë–î
    await db.add_service(message.from_user.id, city, description)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.clear()
    await message.answer("–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

@router_admin.callback_query(F.data == "information_add")
async def add_information(callback: CallbackQuery, state: FSMContext):
    await db.create_promotions_table()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")
    await state.set_state(PromotionStates.adding_promotion_title)

@router_admin.message(StateFilter(PromotionStates.adding_promotion_title))
async def get_promotion_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")
    await state.set_state(PromotionStates.adding_promotion_description)

@router_admin.message(StateFilter(PromotionStates.adding_promotion_description))
async def get_promotion_description(message: Message, state: FSMContext):
    data = await state.get_data()
    title = data['title']
    description = message.text

    await db.add_promotion(title, description)
    await message.answer("–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()


ITEMS_PER_PAGE = 1

@router_admin.callback_query(F.data.startswith("information_view"))
async def admin_view_promotions(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = int(callback.data.split()[1])

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
    total_items = await db.count_promotions()
    total_pages = (total_items + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    promotions = await db.get_promotions(offset=(page - 1) * ITEMS_PER_PAGE, limit=ITEMS_PER_PAGE)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"–ê–∫—Ü–∏–∏ (—Å—Ç—Ä. {page}/{total_pages}):\n\n"
    for promo in promotions:
        text += f"üìå {promo['title']}\n{promo['description']}\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    promotion_id = promotions[0]['id'] if promotions else 0
    keyboard = generate_admin_keyboard(page, total_pages)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏
    for promo in promotions:
        delete_button = InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_{promo['id']}"  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data
        )
        keyboard.inline_keyboard.append([delete_button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(text, reply_markup=keyboard)

def generate_admin_keyboard(current_page: int, total_pages: int):
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    keyboard = []

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if current_page > 1:
        keyboard.append([
            InlineKeyboardButton(
                text="‚¨Ö –ù–∞–∑–∞–¥",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä `text`
                callback_data=f"information_view {current_page - 1}"  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä `callback_data`
            )
        ])

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥"
    if current_page < total_pages:
        keyboard.append([
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä `text`
                callback_data=f"information_view {current_page + 1}"  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä `callback_data`
            )
        ])

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
    return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
@router_admin.callback_query(F.data.startswith("delete_"))
async def delete_promotion_handler(callback: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–∫—Ü–∏–∏ –∏–∑ callback_data
    promotion_id = int(callback.data[len("delete_"):])

    try:
        # –£–¥–∞–ª—è–µ–º –∞–∫—Ü–∏—é
        await db.delete_promotion(promotion_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.answer("–ê–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        await admin_view_promotions(callback)

    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}", show_alert=True)
